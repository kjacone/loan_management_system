name: Loan Management System CI/CD

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY_PREFIX: loan-management-system

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle

      - name: Run tests
        run: ./gradlew test

  build:
    name: Build and push images
    needs: test
    runs-on: ubuntu-latest
    outputs:
      lms-image-tag: ${{ steps.build-push.outputs.lms-image-tag }}
      middleware-image-tag: ${{ steps.build-push.outputs.middleware-image-tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle

      - name: Build with Gradle
        run: ./gradlew clean build -x test

      - name: Set environment
        id: set-env
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "ENVIRONMENT=${{ github.event.inputs.environment }}" >> $GITHUB_ENV
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "ENVIRONMENT=prod" >> $GITHUB_ENV
          else
            echo "ENVIRONMENT=dev" >> $GITHUB_ENV
          fi

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push images to Amazon ECR
        id: build-push
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          # Set image tags
          SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-7)
          LMS_IMAGE_TAG="${SHORT_SHA}"
          MIDDLEWARE_IMAGE_TAG="${SHORT_SHA}"
          
          # Set repository URIs
          LMS_REPOSITORY="${ECR_REGISTRY}/${ECR_REPOSITORY_PREFIX}/lms-service"
          MIDDLEWARE_REPOSITORY="${ECR_REGISTRY}/${ECR_REPOSITORY_PREFIX}/middleware-service"
          
          # Build and push LMS service
          echo "Building and pushing LMS service image..."
          docker build -t ${LMS_REPOSITORY}:${LMS_IMAGE_TAG} -t ${LMS_REPOSITORY}:latest ./lms-service
          docker push ${LMS_REPOSITORY}:${LMS_IMAGE_TAG}
          docker push ${LMS_REPOSITORY}:latest
          
          # Build and push Middleware service
          echo "Building and pushing Middleware service image..."
          docker build -t ${MIDDLEWARE_REPOSITORY}:${MIDDLEWARE_IMAGE_TAG} -t ${MIDDLEWARE_REPOSITORY}:latest ./middleware-service
          docker push ${MIDDLEWARE_REPOSITORY}:${MIDDLEWARE_IMAGE_TAG}
          docker push ${MIDDLEWARE_REPOSITORY}:latest
          
          # Set outputs for use in the deploy job
          echo "lms-image-tag=${LMS_IMAGE_TAG}" >> $GITHUB_OUTPUT
          echo "middleware-image-tag=${MIDDLEWARE_IMAGE_TAG}" >> $GITHUB_OUTPUT

  deploy-infrastructure:
    name: Deploy infrastructure
    needs: [test, build]
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set environment
        id: set-env
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "ENVIRONMENT=${{ github.event.inputs.environment }}" >> $GITHUB_ENV
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "ENVIRONMENT=prod" >> $GITHUB_ENV
          else
            echo "ENVIRONMENT=dev" >> $GITHUB_ENV
          fi

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get VPC and subnet information
        id: get-vpc-info
        run: |
          # Get default VPC ID
          VPC_ID=$(aws ec2 describe-vpcs --filters "Name=isDefault,Values=true" --query "Vpcs[0].VpcId" --output text)
          echo "vpc-id=${VPC_ID}" >> $GITHUB_OUTPUT
          
          # Get subnet IDs from default VPC
          SUBNET_IDS=$(aws ec2 describe-subnets --filters "Name=vpc-id,Values=$VPC_ID" --query "Subnets[*].SubnetId" --output json)
          SUBNET_LIST=$(echo $SUBNET_IDS | jq -r 'join(",")')
          echo "subnet-list=${SUBNET_LIST}" >> $GITHUB_OUTPUT

      - name: Generate DB password if needed
        id: db-password
        run: |
          # Check if the SSM parameter exists and create if it doesn't
          SSM_PATH="/lms/${{ env.ENVIRONMENT }}/db/password"
          
          if ! aws ssm get-parameter --name "$SSM_PATH" --with-decryption >/dev/null 2>&1; then
            # Generate a random password
            DB_PASSWORD=$(openssl rand -base64 16)
            # Store it in SSM
            aws ssm put-parameter \
              --name "$SSM_PATH" \
              --type "SecureString" \
              --value "$DB_PASSWORD" \
              --overwrite
            echo "Password generated and stored in SSM"
          else
            echo "Using existing password from SSM"
          fi
          
          # Get the password for use in CloudFormation
          DB_PASSWORD=$(aws ssm get-parameter --name "$SSM_PATH" --with-decryption --query "Parameter.Value" --output text)
          echo "db-password=${DB_PASSWORD}" >> $GITHUB_OUTPUT

      - name: Deploy CloudFormation Stack
        run: |
          STACK_NAME="loan-management-system-${{ env.ENVIRONMENT }}"
          
          aws cloudformation deploy \
            --template-file infrastructure/aws/main.yaml \
            --stack-name $STACK_NAME \
            --parameter-overrides \
              Environment=${{ env.ENVIRONMENT }} \
              ECRRepositoryName=${{ env.ECR_REPOSITORY_PREFIX }} \
              VpcId=${{ steps.get-vpc-info.outputs.vpc-id }} \
              Subnets=${{ steps.get-vpc-info.outputs.subnet-list }} \
              DatabasePassword=${{ steps.db-password.outputs.db-password }} \
            --capabilities CAPABILITY_IAM \
            --no-fail-on-empty-changeset

  deploy-services:
    name: Deploy services
    needs: [build, deploy-infrastructure]
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    steps:
      - name: Set environment
        id: set-env
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "ENVIRONMENT=${{ github.event.inputs.environment }}" >> $GITHUB_ENV
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "ENVIRONMENT=prod" >> $GITHUB_ENV
          else
            echo "ENVIRONMENT=dev" >> $GITHUB_ENV
          fi

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Update ECS services
        run: |
          # Update the LMS service
          aws ecs update-service \
            --cluster "${{ env.ENVIRONMENT }}-lms-cluster" \
            --service "${{ env.ENVIRONMENT }}-lms-service" \
            --force-new-deployment
          
          # Update the Middleware service
          aws ecs update-service \
            --cluster "${{ env.ENVIRONMENT }}-lms-cluster" \
            --service "${{ env.ENVIRONMENT }}-middleware-service" \
            --force-new-deployment
          
          echo "Deployed services with new container images"

      - name: Wait for services to be stable
        run: |
          # Wait for LMS service
          aws ecs wait services-stable \
            --cluster "${{ env.ENVIRONMENT }}-lms-cluster" \
            --services "${{ env.ENVIRONMENT }}-lms-service"
          
          # Wait for Middleware service
          aws ecs wait services-stable \
            --cluster "${{ env.ENVIRONMENT }}-lms-cluster" \
            --services "${{ env.ENVIRONMENT }}-middleware-service"
          
          echo "Services are now stable"

  notify:
    name: Notify deployment status
    needs: [deploy-services]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Set environment
        id: set-env
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "ENVIRONMENT=${{ github.event.inputs.environment }}" >> $GITHUB_ENV
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "ENVIRONMENT=prod" >> $GITHUB_ENV
          else
            echo "ENVIRONMENT=dev" >> $GITHUB_ENV
          fi

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get deployment info
        id: deployment-info
        run: |
          STACK_NAME="loan-management-system-${{ env.ENVIRONMENT }}"
          
          # Get service URLs from CloudFormation outputs
          LMS_URL=$(aws cloudformation describe-stacks --stack-name $STACK_NAME --query "Stacks[0].Outputs[?OutputKey=='LMSLoadBalancerDNS'].OutputValue" --output text)
          MIDDLEWARE_URL=$(aws cloudformation describe-stacks --stack-name $STACK_NAME --query "Stacks[0].Outputs[?OutputKey=='MiddlewareLoadBalancerDNS'].OutputValue" --output text)
          
          echo "Deployment to ${{ env.ENVIRONMENT }} environment completed"
          echo "LMS Service URL: http://$LMS_URL"
          echo "Middleware Service URL: http://$MIDDLEWARE_URL"
          
          # Set these as step outputs for potential notification
          echo "lms-url=http://$LMS_URL" >> $GITHUB_OUTPUT
          echo "middleware-url=http://$MIDDLEWARE_URL" >> $GITHUB_OUTPUT

      # Optional: Add notification steps (Slack, Email, etc.)
      # - name: Send Slack notification
      #   uses: slackapi/slack-github-action@v1.23.0
      #   with:
      #     payload: |
      #       {
      #         "text": "Deployment to ${{ env.ENVIRONMENT }} completed!\nLMS URL: ${{ steps.deployment-info.outputs.lms-url }}\nMiddleware URL: ${{ steps.deployment-info.outputs.middleware-url }}"
      #       }
      #   env:
      #     SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}